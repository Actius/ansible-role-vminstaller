- name: set machine arch variables
  include_vars: "{{ machinearch }}/console.yml"
  when: virtconsole is not defined

- name: set distribution variables
  include_vars: "{{ distro }}.yml"

- name: create the qemu disk images
  action: qemu-img dest={{ item.path }} size={{ item.size }} format="qcow2" options="preallocation=falloc"
  with_items: "{{ disks }}"
  delegate_to: "{{ hyper }}"

###

### PowerEL 7
- name: start distribution installation - PEL7
  include: install-vm-pel7.yml
  when: templatetype == 'pel7'

### EL 7
- name: start distribution installation - EL7
  include: install-vm-el7.yml
  when: templatetype == 'el7'

### EL 6
- name: start distribution installation - EL6
  include: install-vm-el6.yml
  when: templatetype == 'el6'

### Debians
- name: start distribution installation - DEBIAN
  include: install-vm-debian.yml
  when: templatetype == 'debian'


#- name: start distribution installation - OPENBSD
#  include: install-vm-openbsd.yml
#  when: templatetype == 'openbsd'

#- name: start distribution installation - FREEBSD
#  include: install-vm-freebsd.yml
#  when: templatetype == 'freebsd'

#- name: start distribution installation - WINSRV12
#  include: install-vm-winsrv2012.yml
#  when: templatetype == 'winsrv2012'

#- name: start distribution installation - WINSRV08
#  include: install-vm-winsrv2008.yml
#  when: templatetype == 'winsrv2008'

#- name: start distribution installation - FEDORA
#  include: install-vm-fedora.yml
#  when: templatetype == 'fedora'

#- name: start distribution installation - UBUNTU
#  include: install-vm-ubuntu.yml
#  when: templatetype == 'ubuntu'

#- name: start distribution installation - WIN7
#  include: install-vm-win7.yml
#  when: templatetype == 'win7'

# SLES
# OPENSUSE
# GENTOO
# FREEBSD


###

- name: execute minimum ram hack where required
  include: minimum-ram-hack.yml
  when: minram is defined


- name: start the vm
  action: virt guest={{ inventory_hostname }} command=start
  delegate_to: "{{ hyper }}"
  #ignore_errors: yes

- name: clean up files
  action: file path={{ item }} state=absent
  delegate_to: "{{ hyper }}"
  with_items:
    - "{{ virtualfilespath }}{{ inventory_hostname }}-create-vm.sh"
    - "{{ virtualfilespath }}{{ injectfile }}"
    - "{{ virtualfilespath }}{{ inventory_hostname }}.cfg"
    - "{{ virtualfilespath }}{{ inventory_hostname }}-create-disks.sh"
    - "{{ virtualfilespath }}{{ inventory_hostname }}-minram.sh"
    - "{{ virtualfilespath }}{{ inventory_hostname }}-create-vm.sh"
    - "{{ virtualfilespath }}{{ inventory_hostname }}-autounattend.xml"
    - "{{ virtualfilespath }}{{ inventory_hostname }}-create-autounattend-disk.sh"
    #- "{{ virtualfilespath }}{{ inventory_hostname }}-autounattend-disk.vusb"

- name: wait for vm to become available
  local_action: wait_for host={{ ansible_host }} port={{ ansible_port }} delay=5 state=started timeout=300
  become: no

- name: gather facts
  action: setup
